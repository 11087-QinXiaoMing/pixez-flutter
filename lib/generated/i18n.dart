import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "登录"
  String get Login => "登录";
  /// "保存"
  String get Save => "保存";
  /// "已保存"
  String get Saved => "已保存";
  /// "已存在"
  String get Already_Saved => "已存在";
  /// "推荐"
  String get Recommend => "推荐";
  /// "收藏"
  String get BookMark => "收藏";
  /// "作品"
  String get Works => "作品";
  /// "排行"
  String get Rank => "排行";
  /// "搜索"
  String get Search => "搜索";
  /// ["每日", "男性", "女性", "原创", "新人", "每周", "每月", "XVIII", "XVIII_Week"]
  List<String> get Mode_List => ["每日", "男性", "女性", "原创", "新人", "每周", "每月", "XVIII", "XVIII_Week"];
  /// "插画id"
  String get Illust_id => "插画id";
  /// "插画"
  String get Illust => "插画";
  /// "分辨率"
  String get Pixel => "分辨率";
  /// "总查看"
  String get Total_view => "总查看";
  /// "总收藏"
  String get Total_bookmark => "总收藏";
  /// "查看评论"
  String get View_Comment => "查看评论";
  /// "相关图片"
  String get About_Picture => "相关图片";
  /// "公开"
  String get Public => "公开";
  /// "非公开"
  String get Private => "非公开";
  /// "设置"
  String get Setting => "设置";
  /// "全部"
  String get All => "全部";
  /// "速览"
  String get Quick_View => "速览";
  /// "动态"
  String get New => "动态";
  /// "画师"
  String get Painter => "画师";
  /// "多选保存"
  String get Muti_Choice_save => "多选保存";
  /// "分享"
  String get Share => "分享";
  /// "取消"
  String get Cancel => "取消";
  /// "确认"
  String get OK => "确认";
  /// "主题"
  String get Theme => "主题";
  /// "路径"
  String get Path => "路径";
  /// "格式"
  String get Format => "格式";
  /// "详情"
  String get Detail => "详情";
  /// "关注"
  String get Follow => "关注";
  /// "未关注"
  String get Un_Follow => "未关注";
  /// "历史"
  String get History => "历史";
  /// "清空"
  String get Clear => "清空";

  /// "删除"
  String get Delete => "删除";

  /// "首页"
  String get Home => "首页";

  /// "亮点"
  String get Spotlight => "亮点";

  /// "生日"
  String get birthday => "生日";

  /// "更多"
  String get More => "更多";

  /// "超过${starNum}的收藏"
  String More_then_starNum_Bookmark(String starNum) => "超过${starNum}的用户收藏";
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "Login"
  @override
  String get Login => "Login";
  /// "Save"
  @override
  String get Save => "Save";
  /// "Saved"
  @override
  String get Saved => "Saved";
  /// "Already Saved"
  @override
  String get Already_Saved => "Already Saved";
  /// "Recommend"
  @override
  String get Recommend => "Recommend";
  /// "BookMark"
  @override
  String get BookMark => "BookMark";
  /// "Works"
  @override
  String get Works => "Works";
  /// "Rank"
  @override
  String get Rank => "Rank";
  /// "Search"
  @override
  String get Search => "Search";
  /// "Illustration id"
  @override
  String get Illust_id => "Illustration id";
  /// "illustration"
  @override
  String get Illust => "illustration";
  /// "Resolution"
  @override
  String get Pixel => "Resolution";
  /// "Total view"
  @override
  String get Total_view => "Total view";
  /// "Total collection"
  @override
  String get Total_bookmark => "Total collection";
  /// "View comments"
  @override
  String get View_Comment => "View comments";
  /// "related pictures"
  @override
  String get About_Picture => "related pictures";
  /// "public"
  @override
  String get Public => "public";
  /// "Non-publicise"
  @override
  String get Private => "Non-publicise";
  /// "Set up"
  @override
  String get Setting => "Set up";
  /// "All"
  @override
  String get All => "All";
  /// "Quick tour"
  @override
  String get Quick_View => "Quick tour";
  /// "dynamic"
  @override
  String get New => "dynamic";
  /// "Artist"
  @override
  String get Painter => "Artist";
  /// "Multiple selection save"
  @override
  String get Muti_Choice_save => "Multiple selection save";
  /// "share it"
  @override
  String get Share => "share it";
  /// "cancel"
  @override
  String get Cancel => "cancel";
  /// "confirm"
  @override
  String get OK => "confirm";
  /// "theme"
  @override
  String get Theme => "theme";
  /// "path"
  @override
  String get Path => "path";
  /// "format"
  @override
  String get Format => "format";
  /// "Details"
  @override
  String get Detail => "Details";
  /// "attention"
  @override
  String get Follow => "attention";
  /// "Not following"
  @override
  String get Un_Follow => "Not following";
  /// "history"
  @override
  String get History => "history";
  /// "Clear"
  @override
  String get Clear => "Clear";
  /// "delete"
  @override
  String get Delete => "delete";
  /// "Home"
  @override
  String get Home => "Home";

  /// "Highlights"
  @override
  String get Spotlight => "Highlights";

  /// "birthday"
  @override
  String get birthday => "birthday";

  /// "More"
  @override
  String get More => "More";

  /// "More than ${starNum} favorites"
  @override
  String More_then_starNum_Bookmark(String starNum) =>
      "More than ${starNum} favorites";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "CN"),
      Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("zh_CN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}